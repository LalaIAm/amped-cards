/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { RoundUpdateManyWithoutPlayersInput } from "./RoundUpdateManyWithoutPlayersInput";
import { ValidateNested, IsOptional, IsInt } from "class-validator";
import { Type } from "class-transformer";
import { GameWhereUniqueInput } from "../../game/base/GameWhereUniqueInput";
import { WhiteCardUpdateManyWithoutPlayersInput } from "./WhiteCardUpdateManyWithoutPlayersInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
@InputType()
class PlayerUpdateInput {
  @ApiProperty({
    required: false,
    type: () => RoundUpdateManyWithoutPlayersInput,
  })
  @ValidateNested()
  @Type(() => RoundUpdateManyWithoutPlayersInput)
  @IsOptional()
  @Field(() => RoundUpdateManyWithoutPlayersInput, {
    nullable: true,
  })
  czars?: RoundUpdateManyWithoutPlayersInput;

  @ApiProperty({
    required: false,
    type: () => GameWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => GameWhereUniqueInput)
  @IsOptional()
  @Field(() => GameWhereUniqueInput, {
    nullable: true,
  })
  game?: GameWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => WhiteCardUpdateManyWithoutPlayersInput,
  })
  @ValidateNested()
  @Type(() => WhiteCardUpdateManyWithoutPlayersInput)
  @IsOptional()
  @Field(() => WhiteCardUpdateManyWithoutPlayersInput, {
    nullable: true,
  })
  hand?: WhiteCardUpdateManyWithoutPlayersInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  score?: number | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput;
}
export { PlayerUpdateInput };
