/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { BlackCardWhereUniqueInput } from "../../blackCard/base/BlackCardWhereUniqueInput";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { PlayerWhereUniqueInput } from "../../player/base/PlayerWhereUniqueInput";
import { GameWhereUniqueInput } from "../../game/base/GameWhereUniqueInput";
import { WhiteCardWhereUniqueInput } from "../../whiteCard/base/WhiteCardWhereUniqueInput";
@InputType()
class RoundCreateInput {
  @ApiProperty({
    required: false,
    type: () => BlackCardWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => BlackCardWhereUniqueInput)
  @IsOptional()
  @Field(() => BlackCardWhereUniqueInput, {
    nullable: true,
  })
  blackCard?: BlackCardWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PlayerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PlayerWhereUniqueInput)
  @IsOptional()
  @Field(() => PlayerWhereUniqueInput, {
    nullable: true,
  })
  czar?: PlayerWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => GameWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => GameWhereUniqueInput)
  @IsOptional()
  @Field(() => GameWhereUniqueInput, {
    nullable: true,
  })
  game?: GameWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => WhiteCardWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => WhiteCardWhereUniqueInput)
  @IsOptional()
  @Field(() => WhiteCardWhereUniqueInput, {
    nullable: true,
  })
  winningCard?: WhiteCardWhereUniqueInput | null;
}
export { RoundCreateInput };
