/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateRoundArgs } from "./CreateRoundArgs";
import { UpdateRoundArgs } from "./UpdateRoundArgs";
import { DeleteRoundArgs } from "./DeleteRoundArgs";
import { RoundFindManyArgs } from "./RoundFindManyArgs";
import { RoundFindUniqueArgs } from "./RoundFindUniqueArgs";
import { Round } from "./Round";
import { BlackCard } from "../../blackCard/base/BlackCard";
import { Player } from "../../player/base/Player";
import { Game } from "../../game/base/Game";
import { WhiteCard } from "../../whiteCard/base/WhiteCard";
import { RoundService } from "../round.service";

@graphql.Resolver(() => Round)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class RoundResolverBase {
  constructor(
    protected readonly service: RoundService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async _roundsMeta(
    @graphql.Args() args: RoundFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Round])
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async rounds(
    @graphql.Args() args: RoundFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Round[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Round",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => Round, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "own",
  })
  async round(
    @graphql.Args() args: RoundFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Round | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Round",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Round)
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "create",
    possession: "any",
  })
  async createRound(
    @graphql.Args() args: CreateRoundArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Round> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "create",
      possession: "any",
      resource: "Round",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Round"} creation is forbidden for roles: ${roles}`
      );
    }
    // @ts-ignore
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        blackCard: args.data.blackCard
          ? {
              connect: args.data.blackCard,
            }
          : undefined,

        czar: args.data.czar
          ? {
              connect: args.data.czar,
            }
          : undefined,

        game: args.data.game
          ? {
              connect: args.data.game,
            }
          : undefined,

        winningCard: args.data.winningCard
          ? {
              connect: args.data.winningCard,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Round)
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "update",
    possession: "any",
  })
  async updateRound(
    @graphql.Args() args: UpdateRoundArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Round | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "update",
      possession: "any",
      resource: "Round",
    });
    const invalidAttributes = abacUtil.getInvalidAttributes(
      permission,
      args.data
    );
    if (invalidAttributes.length) {
      const properties = invalidAttributes
        .map((attribute: string) => JSON.stringify(attribute))
        .join(", ");
      const roles = userRoles
        .map((role: string) => JSON.stringify(role))
        .join(",");
      throw new apollo.ApolloError(
        `providing the properties: ${properties} on ${"Round"} update is forbidden for roles: ${roles}`
      );
    }
    try {
      // @ts-ignore
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          blackCard: args.data.blackCard
            ? {
                connect: args.data.blackCard,
              }
            : undefined,

          czar: args.data.czar
            ? {
                connect: args.data.czar,
              }
            : undefined,

          game: args.data.game
            ? {
                connect: args.data.game,
              }
            : undefined,

          winningCard: args.data.winningCard
            ? {
                connect: args.data.winningCard,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Round)
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "delete",
    possession: "any",
  })
  async deleteRound(
    @graphql.Args() args: DeleteRoundArgs
  ): Promise<Round | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => BlackCard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async blackCard(
    @graphql.Parent() parent: Round,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<BlackCard | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "BlackCard",
    });
    const result = await this.service.getBlackCard(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Player, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async czar(
    @graphql.Parent() parent: Round,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Player | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Player",
    });
    const result = await this.service.getCzar(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => Game, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async game(
    @graphql.Parent() parent: Round,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Game | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Game",
    });
    const result = await this.service.getGame(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.ResolveField(() => WhiteCard, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Round",
    action: "read",
    possession: "any",
  })
  async winningCard(
    @graphql.Parent() parent: Round,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<WhiteCard | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "WhiteCard",
    });
    const result = await this.service.getWinningCard(parent.id);

    if (!result) {
      return null;
    }
    return permission.filter(result);
  }
}
